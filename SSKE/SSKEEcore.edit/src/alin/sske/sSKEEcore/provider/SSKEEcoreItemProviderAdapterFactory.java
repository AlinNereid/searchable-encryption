/**
 */
package alin.sske.sSKEEcore.provider;

import alin.sske.sSKEEcore.util.SSKEEcoreAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SSKEEcoreItemProviderAdapterFactory extends SSKEEcoreAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SSKEEcoreItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link alin.sske.sSKEEcore.SSKEEncryptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSKEEncryptorItemProvider sskeEncryptorItemProvider;

	/**
	 * This creates an adapter for a {@link alin.sske.sSKEEcore.SSKEEncryptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSKEEncryptorAdapter() {
		if (sskeEncryptorItemProvider == null) {
			sskeEncryptorItemProvider = new SSKEEncryptorItemProvider(this);
		}

		return sskeEncryptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link alin.sske.sSKEEcore.SSKEDecryptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSKEDecryptorItemProvider sskeDecryptorItemProvider;

	/**
	 * This creates an adapter for a {@link alin.sske.sSKEEcore.SSKEDecryptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSKEDecryptorAdapter() {
		if (sskeDecryptorItemProvider == null) {
			sskeDecryptorItemProvider = new SSKEDecryptorItemProvider(this);
		}

		return sskeDecryptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link alin.sske.sSKEEcore.AES} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AESItemProvider aesItemProvider;

	/**
	 * This creates an adapter for a {@link alin.sske.sSKEEcore.AES}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAESAdapter() {
		if (aesItemProvider == null) {
			aesItemProvider = new AESItemProvider(this);
		}

		return aesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link alin.sske.sSKEEcore.SSKEKeys} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSKEKeysItemProvider sskeKeysItemProvider;

	/**
	 * This creates an adapter for a {@link alin.sske.sSKEEcore.SSKEKeys}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSKEKeysAdapter() {
		if (sskeKeysItemProvider == null) {
			sskeKeysItemProvider = new SSKEKeysItemProvider(this);
		}

		return sskeKeysItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link alin.sske.sSKEEcore.SSKKeysTxt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSKKeysTxtItemProvider sskKeysTxtItemProvider;

	/**
	 * This creates an adapter for a {@link alin.sske.sSKEEcore.SSKKeysTxt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSKKeysTxtAdapter() {
		if (sskKeysTxtItemProvider == null) {
			sskKeysTxtItemProvider = new SSKKeysTxtItemProvider(this);
		}

		return sskKeysTxtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link alin.sske.sSKEEcore.SSKE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSKEItemProvider sskeItemProvider;

	/**
	 * This creates an adapter for a {@link alin.sske.sSKEEcore.SSKE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSKEAdapter() {
		if (sskeItemProvider == null) {
			sskeItemProvider = new SSKEItemProvider(this);
		}

		return sskeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link alin.sske.sSKEEcore.SSKEKeysGenerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSKEKeysGeneratorItemProvider sskeKeysGeneratorItemProvider;

	/**
	 * This creates an adapter for a {@link alin.sske.sSKEEcore.SSKEKeysGenerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSKEKeysGeneratorAdapter() {
		if (sskeKeysGeneratorItemProvider == null) {
			sskeKeysGeneratorItemProvider = new SSKEKeysGeneratorItemProvider(this);
		}

		return sskeKeysGeneratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link alin.sske.sSKEEcore.SSKKeysJson} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSKKeysJsonItemProvider sskKeysJsonItemProvider;

	/**
	 * This creates an adapter for a {@link alin.sske.sSKEEcore.SSKKeysJson}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSKKeysJsonAdapter() {
		if (sskKeysJsonItemProvider == null) {
			sskKeysJsonItemProvider = new SSKKeysJsonItemProvider(this);
		}

		return sskKeysJsonItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (sskeEncryptorItemProvider != null) sskeEncryptorItemProvider.dispose();
		if (sskeDecryptorItemProvider != null) sskeDecryptorItemProvider.dispose();
		if (aesItemProvider != null) aesItemProvider.dispose();
		if (sskeKeysItemProvider != null) sskeKeysItemProvider.dispose();
		if (sskKeysTxtItemProvider != null) sskKeysTxtItemProvider.dispose();
		if (sskeItemProvider != null) sskeItemProvider.dispose();
		if (sskeKeysGeneratorItemProvider != null) sskeKeysGeneratorItemProvider.dispose();
		if (sskKeysJsonItemProvider != null) sskKeysJsonItemProvider.dispose();
	}

}
